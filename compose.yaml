version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # painel de admin
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 5s
      retries: 10

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    ports:
      - "16686:16686" # UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:16686 || exit 1" ]
      interval: 5s
      retries: 10
      
  userservice:
    build:
      context: .
      dockerfile: ./src/Services/Identity/Identity.API/Dockerfile
    container_name: userservice
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=usersdb;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -v http://localhost:8080/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  orderservice:
    build:
      context: .
      dockerfile: ./src/Services/Order/Order.API/Dockerfile
    container_name: orderservice
    ports:
      - "8020:8020"
      - "8021:8021"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8020
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=usersdb;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -v http://localhost:8020/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  productservice:
    build:
      context: .
      dockerfile: ./src/Services/Product/Product.API/Dockerfile
    container_name: productservice
    ports:
      - "8010:8010"
      - "8011:8011"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8010
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=productdb;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -v http://localhost:8010/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  apiservice:
    build:
      context: .
      dockerfile: ./src/ApiGateway/Dockerfile
    container_name: apiservice
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8000
    healthcheck:
      test: [ "CMD-SHELL", "curl -v http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
